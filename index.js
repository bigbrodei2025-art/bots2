// REMOVIDO: require('dotenv').config({ path: 'agendador.env' }); // N√£o vamos mais usar o .env para as credenciais principais

const {
    default: makeWASocket,
    useMultiFileAuthState,
    fetchLatestBaileysVersion,
    DisconnectReason,
    downloadMediaMessage,
} = require("@whiskeysockets/baileys");

const P = require("pino");
const fs = require("fs");
const path = require("path");
const express = require('express');
const app = express();
const axios = require('axios'); // Import axios for HTTP requests

const { PREFIX, ADMIN_JIDS } = require("./config");

// --- ATEN√á√ÉO: CREDENCIAIS HARDCODED! ISSO N√ÉO √â SEGURO PARA PRODU√á√ÉO ---
// POR FAVOR, AO FAZER O DEPLOY NO RENDER, COLOQUE ESTE TOKEN E A URL DO WEBHOOK
// EM VARI√ÅVEIS DE AMBIENTE DO RENDER (ex: MERCADOPAGO_ACCESS_TOKEN e MERCADOPAGO_WEBHOOK_URL)
// N√ÉO OS DEIXE DIRETAMENTE NO C√ìDIGO!
const MERCADOPAGO_ACCESS_TOKEN = "APP_USR-6518621016085858-061522-c8158fa3e2da7d2bddbc37567c159410-24855470"; // <<< COLE SEU ACCESS TOKEN AQUI!
const MERCADOPAGO_WEBHOOK_URL = "https://vovozinhadotaro.onrender.com/webhook-mercadopago"; // <<< COLE SUA URL DO RENDER AQUI!
// --- FIM DA SE√á√ÉO DE CREDENCIAIS ---

// As fun√ß√µes do seu tarot_logic.js continuam sendo importadas
const {
    formatar_data,
    get_zodiac_sign,
    gerar_leitura_tarot,
    conversar_com_tarot,
} = require("./tarot_logic");

// --- Fun√ß√£o Simples para Gerar UUID v4 (para X-Idempotency-Key) ---
// Em um ambiente de produ√ß√£o real, voc√™ usaria uma biblioteca como 'uuid'
function generateUUIDv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// --- User Data Persistence ---
const usuariosTarotDB = {};
const DB_FILE_PATH = path.join(__dirname, 'usuariosTarotDB.json');

function carregarDB() {
    if (fs.existsSync(DB_FILE_PATH)) {
        try {
            const data = fs.readFileSync(DB_FILE_PATH, 'utf8');
            Object.assign(usuariosTarotDB, JSON.parse(data || '{}'));
            console.log("‚úÖ User DB loaded successfully.");
        } catch (e) {
            console.error("‚ùå Error loading user DB:", e);
            Object.assign(usuariosTarotDB, {});
        }
    } else {
        console.log("‚ÑπÔ∏è User DB file not found, a new one will be created.");
    }
}

function salvarDB() {
    try {
        fs.writeFileSync(DB_FILE_PATH, JSON.stringify(usuariosTarotDB, null, 2), 'utf8');
        console.log("‚úÖ User DB saved successfully.");
    } catch (e) {
        console.error("‚ùå Error saving user DB:", e);
    }
}

carregarDB();

const estadoTarot = {};
const estadoEnvio = {}; // Stores mass message sending state per sender

// --- Objeto para guardar os timers de consulta autom√°tica de pagamento ---
const paymentTimers = {};
const MAX_RETRY_ATTEMPTS = 2; // (0, 1, 2 = 3 tentativas no total)
const LONG_TIMEOUT_MINUTES = 30; // Tempo de expira√ß√£o final

const PORT = process.env.PORT || 3000;

// --- Express App Configuration ---
app.use(express.json()); // Middleware to parse JSON request bodies
app.use(express.urlencoded({ extended: true })); // Good practice for webhooks, though MP often sends JSON

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// Root route to indicate the app is running
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html')); // Serve index.html from public
});

// --- Nova Fun√ß√£o: Checar Status de Pagamento no Mercado Pago e Liberar Leitura ---
// Adicionado 'source' para diferenciar a origem da chamada (webhook, manual, retry_short, timer_long)
async function checkMercadoPagoPaymentStatus(paymentId, jid, source = 'webhook') {
    // Limpa o timer para este usu√°rio, se existir, pois a verifica√ß√£o ser√° feita agora
    if (paymentTimers[jid]) {
        clearTimeout(paymentTimers[jid]);
        delete paymentTimers[jid];
        console.log(`Timer de pagamento limpo para ${jid} (verifica√ß√£o ${source}).`);
    }

    try {
        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {
            headers: {
                'Authorization': `Bearer ${MERCADOPAGO_ACCESS_TOKEN}`
            }
        });

        const payment = response.data;
        const paymentStatus = payment.status;
        const externalReference = payment.external_reference;

        console.log(`Consulta (${source}) - Payment ${paymentId} Status: ${paymentStatus}, External Ref: ${externalReference}`);

        if (externalReference && `${externalReference}@s.whatsapp.net` === jid) {
            if (paymentStatus === 'approved') {
                usuariosTarotDB[jid].pagamento_confirmado_para_leitura = true;
                usuariosTarotDB[jid].aguardando_pagamento_para_leitura = false;
                usuariosTarotDB[jid].last_payment_transaction_id = paymentId;
                salvarDB();

                await sock.sendPresenceUpdate("composing", jid);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(jid, {
                    text: "A Vovozinha sentiu sua energia! ‚ú® Pagamento confirmado pelo Mercado Pago! Agora, meu benzinho, podemos abrir os caminhos do Tar√¥. Diga-me, qual o seu **nome** para a Vovozinha come√ßar? üòä",
                });
                delete estadoTarot[jid];
                estadoTarot[jid] = { etapa: "aguardando_nome" };
                console.log(`‚úÖ Leitura liberada via consulta (${source}) para ${jid}`);
                return true; // Pagamento aprovado
            } else if (paymentStatus === 'pending') {
                // S√≥ envia mensagem de pendente se for uma consulta manual.
                // As mensagens das retentativas e do timer longo s√£o gerenciadas fora desta fun√ß√£o.
                if (source === 'manual') {
                    await sock.sendPresenceUpdate("composing", jid);
                    await new Promise((resolve) => setTimeout(resolve, 1500));
                    await sock.sendMessage(jid, {
                        text: "A Vovozinha ainda est√° aguardando a confirma√ß√£o do seu pagamento, meu benzinho. Ele ainda aparece como **PENDENTE**. Por favor, aguarde mais um pouquinho ou verifique seu aplicativo de pagamento. üôè",
                    });
                } else if (source === 'timer_long') {
                    // J√° √© a expira√ß√£o final, n√£o precisa enviar "pendente" aqui. O timer handle a mensagem de expira√ß√£o.
                }
                // Para retries curtos (source === 'retry_short' ou webhook), n√£o envia mensagem de "pendente" aqui,
                // a l√≥gica de retentativa ou o fluxo de webhook j√° lida com o que deve ser enviado.
                return false; // Pagamento pendente
            } else if (paymentStatus === 'rejected' || paymentStatus === 'cancelled') {
                // Se o estado ainda for 'aguardando_pagamento_mercadopago' (evita enviar se j√° foi cancelado manual)
                if (estadoTarot[jid] && estadoTarot[jid].etapa === "aguardando_pagamento_mercadopago") {
                    await sock.sendPresenceUpdate("composing", jid);
                    await new Promise((resolve) => setTimeout(resolve, 1500));
                    await sock.sendMessage(jid, {
                        text: "A Vovozinha percebeu que o pagamento **n√£o foi aprovado** ou foi **cancelado**. Por favor, tente novamente se desejar a leitura. üòî",
                    });
                    usuariosTarotDB[jid].aguardando_pagamento_para_leitura = false;
                    delete estadoTarot[jid]; // Encerra o fluxo
                    salvarDB();
                }
                return false; // Pagamento n√£o aprovado
            }
        }
        return false; // Transa√ß√£o n√£o corresponde ou status n√£o tratado
    } catch (error) {
        console.error(`‚ùå Erro ao consultar pagamento (${source}) no Mercado Pago:`, error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        // Se o estado ainda for 'aguardando_pagamento_mercadopago' (evita enviar se j√° foi cancelado manual)
        if (estadoTarot[jid] && estadoTarot[jid].etapa === "aguardando_pagamento_mercadopago") {
            await sock.sendPresenceUpdate("composing", jid);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(jid, {
                text: "A Vovozinha sentiu um problema ao verificar seu pagamento agora, meu benzinho. Por favor, aguarde ou tente novamente em alguns instantes. üòî",
            });
        }
        return false;
    }
}

// --- Mercado Pago Webhook Route ---
app.post('/webhook-mercadopago', async (req, res) => {
    console.log('‚ú® Mercado Pago webhook received!');
    console.log('MP Webhook Body:', JSON.stringify(req.body, null, 2));

    const notificationType = req.body.type;
    const resourceId = req.body.data && req.body.data.id;

    if (notificationType === 'payment' && resourceId) {
        const externalRefFromResource = req.body.resource && req.body.resource.external_reference;
        const externalRefFromData = req.body.data && req.body.data.external_reference;
        const jidPhoneNumber = externalRefFromData || externalRefFromResource || 'unknown';

        const jid = `${jidPhoneNumber}@s.whatsapp.net`;

        await checkMercadoPagoPaymentStatus(resourceId, jid, 'webhook'); // Passa 'webhook' como source
        return res.status(200).send('OK MP - Webhook processado');
    } else {
        console.log('‚ö†Ô∏è Webhook Mercado Pago: Tipo de notifica√ß√£o n√£o suportado ou ID do recurso ausente.');
        return res.status(400).send('Bad Request: Payload de webhook MP n√£o reconhecido.');
    }
});

let sock;

// --- Function to start the WhatsApp Bot ---
async function startBot() {
    const { state, saveCreds } = await useMultiFileAuthState(
        path.join(__dirname, "auth_info_baileys")
    );
    const { version } = await fetchLatestBaileysVersion();

    sock = makeWASocket({
        version,
        logger: P({ level: "silent" }),
        printQRInTerminal: true,
        auth: state,
    });

    sock.ev.on("creds.update", saveCreds);

    sock.ev.on("connection.update", async ({ connection, lastDisconnect }) => {
        if (connection === "open") console.log("‚úÖ Bot conectado com sucesso!");
        if (
            connection === "close" &&
            lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut
        ) {
            console.log("üîÅ Reconectando...");
            startBot();
        }
    });

    console.log('‚è∞ Agendador de lembretes proativos DESABILITADO, foco na libera√ß√£o por pagamento! ‚ú®');

    // --- Fun√ß√£o para Gerar Cobran√ßa Pix no Mercado Pago ---
    async function gerarCobrancaPixMercadoPago(amountInCents, clientPhoneNumber) {
        try {
            const paymentsApiUrl = 'https://api.mercadopago.com/v1/payments';

            if (!MERCADOPAGO_ACCESS_TOKEN) {
                console.error("‚ùå MERCADOPAGO_ACCESS_TOKEN n√£o est√° definido!");
                return { pixCopiaECola: null, qrCodeBase64: null, paymentId: null };
            }
            if (!MERCADOPAGO_WEBHOOK_URL) {
                console.error("‚ùå MERCADOPAGO_WEBHOOK_URL n√£o est√° definido!");
                return { pixCopiaECola: null, qrCodeBase64: null, paymentId: null };
            }

            const idempotencyKey = generateUUIDv4();

            const headers = {
                'Authorization': `Bearer ${MERCADOPAGO_ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'X-Idempotency-Key': idempotencyKey
            };

            const body = {
                transaction_amount: amountInCents / 100,
                description: "Leitura de Tar√¥ da Vovozinha",
                payment_method_id: "pix",
                external_reference: clientPhoneNumber,
                payer: {
                    email: `vovozinha_client_${clientPhoneNumber}@example.com`,
                },
                notification_url: MERCADOPAGO_WEBHOOK_URL
            };

            console.log("Mercado Pago Request Body:", JSON.stringify(body, null, 2));

            const response = await axios.post(paymentsApiUrl, body, { headers: headers });

            if (response.data && response.data.point_of_interaction) {
                const qrCodeData = response.data.point_of_interaction.transaction_data;
                return {
                    pixCopiaECola: qrCodeData.qr_code,
                    qrCodeBase64: qrCodeData.qr_code_base64,
                    paymentId: response.data.id // Retorna o ID do pagamento gerado pelo Mercado Pago
                };
            }

            console.error("‚ùå Resposta inesperada da API /payments do Mercado Pago:", JSON.stringify(response.data, null, 2));
            return { pixCopiaECola: null, qrCodeBase64: null, paymentId: null };

        } catch (error) {
            console.error("‚ùå Erro ao criar cobran√ßa Pix com Mercado Pago:", error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
            return { pixCopiaECola: null, qrCodeBase64: null, paymentId: null };
        }
    }

    sock.ev.on("messages.upsert", async ({ messages }) => {
        const m = messages[0];
        if (!m.message || m.key.fromMe) return;

        const sender = m.key.remoteJid;
        const msg =
            m.message.conversation || m.message.extendedTextMessage?.text || "";

        const mensagemMinuscula = msg.toLowerCase();
        const hoje = new Date().toISOString().slice(0, 10);

        // --- Garante que o objeto do usu√°rio existe no in√≠cio ---
        if (!usuariosTarotDB[sender]) {
            usuariosTarotDB[sender] = { is_admin_granted_access: false };
        }
        // NOVO: Se o remetente √© um admin, garante que ele mesmo tenha acesso liberado
        if (ADMIN_JIDS.includes(sender) && usuariosTarotDB[sender].is_admin_granted_access !== true) {
            usuariosTarotDB[sender].is_admin_granted_access = true;
            salvarDB();
        }
        // -----------------------------------------------------

        // --- L√≥gica de Comandos de ADMIN ---
        const isAdmin = ADMIN_JIDS.includes(sender);
        if (isAdmin) {
            const adminCommand = mensagemMinuscula.trim();
            if (adminCommand.startsWith(`${PREFIX}liberar `)) {
                const targetNumber = adminCommand.substring(PREFIX.length + "liberar ".length).trim();
                const targetJid = `${targetNumber.replace(/\D/g, '')}@s.whatsapp.net`;

                if (!usuariosTarotDB[targetJid]) {
                    usuariosTarotDB[targetJid] = {};
                }
                usuariosTarotDB[targetJid].is_admin_granted_access = true;
                usuariosTarotDB[targetJid].pagamento_confirmado_para_leitura = true;
                salvarDB();

                await sock.sendMessage(sender, { text: `‚úÖ Acesso liberado para ${targetNumber}. Ele poder√° iniciar uma tiragem sem pagar.` });
                await sock.sendMessage(targetJid, { text: `‚ú® A Vovozinha sentiu uma energia especial! Seu acesso para uma tiragem de Tar√¥ foi liberado por um administrador. Diga seu **nome** para come√ßarmos! üòä` });
                console.log(`Admin ${sender} liberou acesso para ${targetJid}`);
                delete estadoTarot[targetJid];
                estadoTarot[targetJid] = { etapa: "aguardando_nome" };
                return;
            } else if (adminCommand.startsWith(`${PREFIX}revogar `)) {
                const targetNumber = adminCommand.substring(PREFIX.length + "revogar ".length).trim();
                const targetJid = `${targetNumber.replace(/\D/g, '')}@s.whatsapp.net`;

                if (usuariosTarotDB[targetJid]) {
                    usuariosTarotDB[targetJid].is_admin_granted_access = false;
                    usuariosTarotDB[targetJid].pagamento_confirmado_para_leitura = false;
                    salvarDB();
                    await sock.sendMessage(sender, { text: `‚ùå Acesso revogado para ${targetNumber}. Ele precisar√° pagar por futuras tiragens.` });
                    await sock.sendMessage(targetJid, { text: `üòî A Vovozinha sentiu uma mudan√ßa na energia. Seu acesso liberado para tiragens foi revogado por um administrador.` });
                    console.log(`Admin ${sender} revogou acesso para ${targetJid}`);
                    delete estadoTarot[targetJid];
                } else {
                    await sock.sendMessage(sender, { text: `‚ö†Ô∏è Usu√°rio ${targetNumber} n√£o encontrado no banco de dados.` });
                }
                return;
            }
        }

        // --- L√≥gica para o usu√°rio CANCELAR o processo de pagamento ---
        const comandosCancelar = ["cancelar", "desistir", "nao quero mais", "n√£o quero mais"];
        const isComandoCancelar = comandosCancelar.some(cmd => mensagemMinuscula.includes(cmd));

        if (isComandoCancelar && estadoTarot[sender] && estadoTarot[sender].etapa === "aguardando_pagamento_mercadopago") {
            if (paymentTimers[sender]) {
                clearTimeout(paymentTimers[sender]);
                delete paymentTimers[sender];
                console.log(`Timer de pagamento cancelado para ${sender}.`);
            }
            usuariosTarotDB[sender].aguardando_pagamento_para_leitura = false;
            salvarDB();

            delete estadoTarot[sender];
            await sock.sendPresenceUpdate("composing", sender);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(sender, { text: "Voc√™ cancelou a solicita√ß√£o de pagamento, meu benzinho. A Vovozinha estar√° aqui quando precisar de outro conselho! üíñ" });
            return;
        }

        // --- L√≥gica para "Ol√°/Oi" para iniciar o modo Tar√¥ ou fluxo de Pagamento ---
        const saudacoes = ["oi", "ol√°", "ola"];
        const isSaudacaoInicio = saudacoes.some(s => mensagemMinuscula.includes(s));

        // Condi√ß√µes para iniciar o fluxo de Tar√¥/Pagamento
        const isTarotCommandInicio = msg.startsWith(`${PREFIX}tarot`) || mensagemMinuscula.includes("vov√≥");

        // Se uma sauda√ß√£o ou comando de tar√¥ for recebido, e o bot n√£o estiver em um fluxo de tar√¥
        if ((isTarotCommandInicio || isSaudacaoInicio) && !estadoTarot[sender]) {
            // PRIMEIRO CHECA: Se tem acesso liberado por admin
            if (usuariosTarotDB[sender].is_admin_granted_access === true) {
                usuariosTarotDB[sender].pagamento_confirmado_para_leitura = true;
                salvarDB();
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "A Vovozinha sente sua energia especial! Seu acesso j√° est√° liberado. Diga-me, qual o seu **nome** para a Vovozinha come√ßar? üòä",
                });
                delete estadoTarot[sender];
                estadoTarot[sender] = { etapa: "aguardando_nome" };
                return;
            }

            // SEGUNDO CHECA: Se j√° pagou (via webhook ou comando 'pago' anterior)
            if (usuariosTarotDB[sender].pagamento_confirmado_para_leitura === true) {
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "A Vovozinha j√° sentiu a sua energia! Seu pagamento j√° est√° confirmado. Me diga, qual o seu **nome** para a Vovozinha come√ßar? üòä",
                });
                delete estadoTarot[sender];
                estadoTarot[sender] = { etapa: "aguardando_nome" };
                salvarDB();
                return;
            }

            // TERCEIRO CASO: Se n√£o pagou e n√£o tem acesso admin, prop√µe o Pix de 1 centavo
            if (!usuariosTarotDB[sender].aguardando_pagamento_para_leitura) {
                estadoTarot[sender] = { etapa: "aguardando_confirmacao_1_centavo" };
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "Ol√°, meu benzinho! Quer fazer uma tiragem de Tar√¥ completa com a Vovozinha por apenas **1 centavo** para sentir a energia das cartas? (Sim/N√£o) ‚ú®",
                });
                return;
            }
        }

        // --- L√≥gica para o usu√°rio dizer "pago" durante a espera pelo pagamento ---
        const comandosPago = ["pago", "j√° paguei", "ja paguei", "confirmei o pagamento", "paguei"];
        const isComandoPago = comandosPago.some(cmd => mensagemMinuscula.includes(cmd));

        if (isComandoPago && estadoTarot[sender] && estadoTarot[sender].etapa === "aguardando_pagamento_mercadopago") {
            const paymentIdToVerify = estadoTarot[sender].mercadopago_payment_id;
            if (paymentIdToVerify) {
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1000));
                await sock.sendMessage(sender, { text: "Vovozinha recebeu! Verificando o pagamento... üï∞Ô∏è" });
                // A chamada para checkMercadoPagoPaymentStatus j√° lida com a mensagem de pendente/aprovado/recusado
                await checkMercadoPagoPaymentStatus(paymentIdToVerify, sender, 'manual');
            } else {
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, { text: "A Vovozinha n√£o encontrou um pagamento recente para verificar, meu benzinho. Voc√™ j√° gerou o Pix? Por favor, comece com 'vov√≥' ou '!tarot' para gerar um novo." });
            }
            return;
        }

        // Se o usu√°rio est√° aguardando pagamento e enviou outra coisa que n√£o √© comando de pagamento ou cancelamento
        if (estadoTarot[sender] && estadoTarot[sender].etapa === "aguardando_pagamento_mercadopago" && !isComandoPago && !isComandoCancelar) {
            await sock.sendPresenceUpdate("composing", sender);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(sender, {
                text: "A Vovozinha ainda est√° aguardando a confirma√ß√£o do seu pagamento pelo Mercado Pago, meu benzinho. J√° pagou? Se sim, por favor, aguarde mais um pouquinho. Se quiser que eu verifique, diga 'pago' ou 'j√° paguei'! Se desistiu, diga 'cancelar'. ‚ú®",
            });
            return;
        }

        // --- CONTINUA√á√ÉO DA L√ìGICA DO SEU BOT ---
        if (msg.startsWith("!ping")) {
            const tempoAtual = new Date();
            const status = await sock.getState();
            const responseText = `üèì PONG! \nConnection Status: ${status}\nCurrent Time: ${tempoAtual.toLocaleString()}`;
            await sock.sendPresenceUpdate("composing", sender);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(sender, { text: responseText });
            return;
        }

        if (msg.startsWith(`${PREFIX}enviar`)) {
            if (estadoTarot[sender]) {
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "Voc√™ j√° est√° em uma leitura de Tar√¥ com a Vovozinha. Digite **'cancelar'** para sair da leitura de Tar√¥.",
                });
                return;
            }
            estadoEnvio[sender] = { etapa: "numero" };
            await sock.sendPresenceUpdate("composing", sender);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(sender, {
                text: "üì≤ Por favor, forne√ßa o n√∫mero do cliente! (ex: 5511999999999) ou envie o CSV.",
            });
            return;
        }

        if (msg.toLowerCase() === "cancelar" && estadoTarot[sender]) {
            delete estadoTarot[sender];
            await sock.sendPresenceUpdate("composing", sender);
            await new Promise((resolve) => setTimeout(resolve, 1500));
            await sock.sendMessage(sender, {
                text: "Leitura de Tar√¥ cancelada, meu benzinho. Volte sempre que precisar do carinho da Vovozinha! üíñ Limpeza Energ√©tica e Prote√ß√£o Espiritual Visite https://s.shopee.com.br/BHzHi3dTW",
            });
            return;
        }

        if (estadoTarot[sender]) {
            const estado = estadoTarot[sender];

            switch (estado.etapa) {
                case "aguardando_confirmacao_1_centavo":
                    const respostaConfirmacao = msg.trim().toLowerCase();
                    if (respostaConfirmacao === "sim") {
                        const senderPhoneNumber = sender.split('@')[0].replace(/\D/g, '');
                        const valorLeitura = 1; // 1 centavo

                        const { pixCopiaECola, qrCodeBase64, paymentId } = await gerarCobrancaPixMercadoPago(valorLeitura, senderPhoneNumber);

                        if (pixCopiaECola && paymentId) {
                            estadoTarot[sender] = {
                                etapa: "aguardando_pagamento_mercadopago",
                                external_reference_gerado: senderPhoneNumber,
                                mercadopago_payment_id: paymentId,
                                retry_count: 0 // NOVO: Inicia o contador de retentativas
                            };
                            usuariosTarotDB[sender].aguardando_pagamento_para_leitura = true;
                            usuariosTarotDB[sender].ultima_solicitacao_pagamento_timestamp = new Date().toISOString();
                            usuariosTarotDB[sender].external_reference_atual = estadoTarot[sender].external_reference_gerado;
                            usuariosTarotDB[sender].mercadopago_payment_id = paymentId;
                            salvarDB();


                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1500));

                            // 1. Mensagem inicial com informa√ß√µes do valor
                            await sock.sendMessage(sender, {
                                text: `üåú Perfeito, meu benzinho! Para a Vovozinha abrir os caminhos do Tar√¥, a energia precisa fluir. O valor da sua tiragem √© de **R$ ${valorLeitura / 100},00**. ‚ú®`
                            });

                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1000));

                            // 2. Mensagem com as instru√ß√µes para Pix Copia e Cola
                            await sock.sendMessage(sender, {
                                text: `Por favor, fa√ßa o pagamento via Pix Copia e Cola para o c√≥digo abaixo. Assim que for confirmado, a Vovozinha sentir√° e te avisar√°! üíñ`
                            });

                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1000));

                            // 3. MENSAGEM SEPARADA APENAS COM O C√ìDIGO PIX (COM CRASES NOVAMENTE)
                            await sock.sendMessage(sender, {
                                text: `\`\`\`${pixCopiaECola.trim()}\`\`\``
                            });

                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1000));

                            // 4. NOVA MENSAGEM: Aviso de c√≥pia
                            await sock.sendMessage(sender, {
                                text: `‚ö†Ô∏è Ao copiar, verifique se n√£o h√° espa√ßos ou aspas (") no in√≠cio/fim do c√≥digo. Se houver, remova-os para que o Pix funcione!`
                            });

                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1000));

                            // 5. MENSAGEM ORIGINAL: Apenas o aviso de validade
                            await sock.sendMessage(sender, {
                                text: `(Este c√≥digo √© v√°lido por um tempo limitado.)`
                            });

                            if (qrCodeBase64) {
                                await sock.sendPresenceUpdate("composing", sender);
                                await new Promise((resolve) => setTimeout(resolve, 1500));
                                const qrBuffer = Buffer.from(qrCodeBase64, 'base64');
                                await sock.sendMessage(sender, {
                                    image: qrBuffer,
                                    caption: `Ou escaneie o QR Code abaixo para pagar:`
                                });
                            }

                            // --- NOVO: Configura o timer para a PRIMEIRA consulta autom√°tica (30 segundos) ---
                            // Esta √© a fun√ß√£o que gerencia as 3 tentativas e o timer longo
                            const scheduleNextCheck = async () => {
                                // Se o estado do usu√°rio mudou (pagou, cancelou), n√£o continua
                                if (!estadoTarot[sender] || estadoTarot[sender].etapa !== "aguardando_pagamento_mercadopago") {
                                    console.log(`Scheduler para ${sender} interrompido. Estado mudou.`);
                                    delete paymentTimers[sender];
                                    return;
                                }

                                const currentRetryCount = estadoTarot[sender].retry_count || 0;
                                const paymentIdToVerify = estadoTarot[sender].mercadopago_payment_id;

                                // Se j√° chegou ao limite de retentativas curtas
                                if (currentRetryCount >= MAX_RETRY_ATTEMPTS) {
                                    console.log(`Tentativas curtas esgotadas para ${sender}. Iniciando timer de ${LONG_TIMEOUT_MINUTES} minutos.`);
                                    await sock.sendPresenceUpdate("composing", sender);
                                    await new Promise((resolve) => setTimeout(resolve, 1000));
                                    await sock.sendMessage(sender, {
                                        text: `Seu Pix est√° pendente ap√≥s ${MAX_RETRY_ATTEMPTS + 1} tentativas curtas. A Vovozinha aguardar√° **${LONG_TIMEOUT_MINUTES} minutos** pela confirma√ß√£o final. Se o pagamento n√£o for confirmado nesse per√≠odo, a sess√£o expirar√°. ‚ú®`
                                    });

                                    // Configura o timer longo e encerra este scheduler curto
                                    paymentTimers[sender] = setTimeout(async () => {
                                        console.log(`‚è∞ Sess√£o de pagamento expirou para ${sender} (${LONG_TIMEOUT_MINUTES} minutos).`);
                                        const finalPaymentApproved = await checkMercadoPagoPaymentStatus(paymentIdToVerify, sender, 'timer_long');

                                        if (!finalPaymentApproved) {
                                            await sock.sendPresenceUpdate("composing", sender);
                                            await new Promise((resolve) => setTimeout(resolve, 1000));
                                            await sock.sendMessage(sender, {
                                                text: "üòî A Vovozinha n√£o conseguiu confirmar seu pagamento ap√≥s 30 minutos, e a sess√£o expirou. Por favor, inicie uma nova tiragem se desejar! ‚ú®"
                                            });
                                        }
                                        // Finaliza a sess√£o independentemente, checkMercadoPagoPaymentStatus j√° tratou a aprova√ß√£o
                                        if(usuariosTarotDB[sender]) usuariosTarotDB[sender].aguardando_pagamento_para_leitura = false;
                                        delete estadoTarot[sender];
                                        salvarDB();
                                        delete paymentTimers[sender];
                                    }, LONG_TIMEOUT_MINUTES * 60 * 1000);

                                    return; // Sai da fun√ß√£o de scheduler curto
                                }

                                // Se n√£o esgotou as tentativas curtas, continua
                                estadoTarot[sender].retry_count = currentRetryCount + 1; // Incrementa o contador
                                console.log(`‚è∞ Tentando re-consultar pagamento automaticamente para ${sender} (Tentativa ${estadoTarot[sender].retry_count + 1}/${MAX_RETRY_ATTEMPTS + 1})...`); // +1 para mostrar 1 de 3, 2 de 3

                                await sock.sendPresenceUpdate("composing", sender);
                                await new Promise((resolve) => setTimeout(resolve, 1000));
                                await sock.sendMessage(sender, {
                                    text: `A Vovozinha est√° fazendo a ${estadoTarot[sender].retry_count + 1}¬™ checagem autom√°tica do seu pagamento... Aguarde um instante! üîÑ`
                                });
                                const paymentApproved = await checkMercadoPagoPaymentStatus(paymentIdToVerify, sender, 'retry_short'); // Source 'retry_short'

                                if (!paymentApproved) {
                                    // Se ainda n√£o aprovado, reagenda a pr√≥xima tentativa curta
                                    paymentTimers[sender] = setTimeout(scheduleNextCheck, 30 * 1000); // Reagenda a pr√≥pria fun√ß√£o
                                }
                                // Se aprovado, checkMercadoPagoPaymentStatus j√° lidou com tudo e limpou o timer.
                            };

                            // Inicia a primeira chamada do scheduler (ap√≥s 30 segundos)
                            paymentTimers[sender] = setTimeout(scheduleNextCheck, 30 * 1000);

                        } else {
                            await sock.sendMessage(sender, { text: "Vovozinha sentiu um bloqueio nas energias! N√£o consegui gerar o Pix agora. Por favor, tente novamente mais tarde.üòî" });
                        }
                    } else if (respostaConfirmacao === "n√£o" || respostaConfirmacao === "nao") {
                        delete estadoTarot[sender];
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "Tudo bem, meu benzinho. A Vovozinha estar√° aqui quando voc√™ precisar de um conselho. Volte sempre! üíñ",
                        });
                    } else {
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "A Vovozinha n√£o entendeu sua resposta. Por favor, diga **'Sim'** ou **'N√£o'** para confirmar. üôè",
                        });
                    }
                    break;

                case "aguardando_nome":
                    estado.nome = msg.trim();
                    estado.etapa = "aguardando_nascimento";

                    usuariosTarotDB[sender].nome = estado.nome;
                    salvarDB();

                    await sock.sendPresenceUpdate("composing", sender);
                    await new Promise((resolve) => setTimeout(resolve, 1500));
                    await sock.sendMessage(sender, {
                        text: `Que nome lindo, ${estado.nome}! Agora, para a Vovozinha sentir melhor sua energia, por favor, me diga sua **data de nascimento** (DDMMYYYY). Ex: 19022001 üìÖ`,
                    });
                    break;

                case "aguardando_nascimento":
                    try {
                        const data_digitada = msg.trim();
                        const data_formatada_para_exibir = formatar_data(data_digitada);
                        const signo_calculado = get_zodiac_sign(data_formatada_para_exibir);

                        estado.nascimento = data_digitada;
                        estado.nascimento_formatado = data_formatada_para_exibir;
                        estado.signo = signo_calculado;

                        estado.etapa = "confirmando_nascimento";
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 7000));
                        await sock.sendMessage(sender, {
                            text: `A Vovozinha entendeu que voc√™ nasceu em **${data_formatada_para_exibir
                                .split("-")
                                .reverse()
                                .join("/")}** e seu signo √© **${signo_calculado}**. Est√° correto, meu benzinho? (Sim/N√£o) ü§î`,
                        });
                    } catch (e) {
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: `A Vovozinha sentiu algo errado com essa data: ${e.message} Por favor, tente novamente no formato DDMMYYYY, meu anjo. üòî`,
                        });
                    }
                    break;

                case "confirmando_nascimento":
                    const resposta_confirmacao = msg.trim().toLowerCase();
                    if (resposta_confirmacao === "sim") {
                        estado.etapa = "aguardando_tema";
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "üïØÔ∏è √ìtimo, est√° certinho! Diga-me, meu benzinho... onde seu cora√ß√£o busca conselhos?\n\n1Ô∏è‚É£ **Amor**\n2Ô∏è‚É£ **Trabalho**\n3Ô∏è‚É£ **Dinheiro**\n4Ô∏è‚É£ **Esp√≠rito e Alma**\n5Ô∏è‚É£ **Tenho uma pergunta espec√≠fica**",
                        });
                    } else if (resposta_confirmacao === "n√£o" || resposta_confirmacao === "nao") {
                        estado.etapa = "aguardando_nascimento";
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "Ah, perd√£o, meu anjo! Por favor, digite sua **data de nascimento** (DDMMYYYY) novamente para a Vovozinha. Ex: 19022001 üìÖ",
                        });
                    } else {
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "A Vovozinha n√£o entendeu sua resposta. Por favor, diga **'Sim'** ou **'N√£o'** para confirmar. üôè",
                        });
                    }
                    break;

                case "aguardando_tema":
                    const temasOpcoes = {
                        "1": "Amor",
                        "2": "Trabalho",
                        "3": "Dinheiro",
                        "4": "Esp√≠rito e alma",
                        "5": "Pergunta Espec√≠fica",
                    };
                    const temaEscolhidoTexto = temasOpcoes[msg.trim()];

                    if (temaEscolhidoTexto) {
                        estado.tema = temaEscolhidoTexto;
                        if (estado.tema === "Pergunta Espec√≠fica") {
                            estado.etapa = "aguardando_pergunta";
                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1500));
                            await sock.sendMessage(sender, {
                                text: "Conte √† Vovozinha... o que te aflige? Escreva sua **pergunta** com carinho:\n(Exemplo: 'Conseguirei aquele emprego?', 'Essa pessoa realmente me ama?') üí¨",
                            });
                        } else {
                            estado.etapa = "aguardando_tipo_tiragem";
                            await sock.sendPresenceUpdate("composing", sender);
                            await new Promise((resolve) => setTimeout(resolve, 1500));
                            await sock.sendMessage(sender, {
                                text: "‚ú® Vamos ver quantas cartas voc√™ quer que a Vovozinha puxe:\n\n1Ô∏è‚É£ **Apenas uma** ‚Äì Direto ao ponto, como colher uma flor\n2Ô∏è‚É£ **Tr√™s cartas** ‚Äì Passado, presente e futuro, como o fio da vida\n3Ô∏è‚É£ **Uma tiragem completa** ‚Äì Para quem quer olhar fundo no po√ßo da alma",
                            });
                        }
                    } else {
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "A Vovozinha n√£o entendeu, meu benzinho. Por favor, escolha um n√∫mero de **1 a 5** para o tema. üôè",
                        });
                    }
                    break;

                case "aguardando_pergunta":
                    estado.pergunta_especifica = msg.trim();
                    estado.etapa = "aguardando_tipo_tiragem";
                    await sock.sendPresenceUpdate("composing", sender);
                    await new Promise((resolve) => setTimeout(resolve, 1500));
                    await sock.sendMessage(sender, {
                        text: "‚ú® E para essa pergunta, meu anjo, quantas cartas voc√™ quer que a Vovozinha puxe:\n\n1Ô∏è‚É£ **Apenas uma** ‚Äì Direto ao ponto, como colher uma flor\n2Ô∏è‚É£ **Tr√™s cartas** ‚Äì Passado, presente e futuro, como o fio da vida\n3Ô∏è‚É£ **Uma tiragem completa** ‚Äì Para quem quer olhar fundo no po√ßo da alma",
                    });
                    break;

                case "aguardando_tipo_tiragem":
                    const tiposTiragem = {
                        "1": "uma",
                        "2": "tres",
                        "3": "completa",
                    };
                    const tipoTiragemEscolhido = tiposTiragem[msg.trim()];

                    if (tipoTiragemEscolhido) {
                        estado.tipo_tiragem = tipoTiragemEscolhido;

                        await sock.sendPresenceUpdate("composing", sender);

                        const { resultado, cartas_selecionadas, historico_inicial } = await gerar_leitura_tarot(
                            estado.nome,
                            estado.nascimento,
                            estado.tema,
                            estado.tipo_tiragem,
                            estado.pergunta_especifica
                        );

                        await sock.sendPresenceUpdate("paused", sender);
                        estado.cartas = cartas_selecionadas;
                        estado.historico_chat = historico_inicial;
                        estado.etapa = "leitura_concluida";
                        usuariosTarotDB[sender].last_reading_date_completa = new Date().toISOString();
                        usuariosTarotDB[sender].opt_out_proativo = false;
                        usuariosTarotDB[sender].enviado_lembrete_hoje = false;
                        usuariosTarotDB[sender].aguardando_resposta_lembrete = false;

                        await sock.sendMessage(sender, { text: resultado });
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));

                        // --- Mensagem de encerramento da leitura e instru√ß√£o para pr√≥xima ---
                        await sock.sendMessage(sender, {
                            text: "üíñ Essa foi a sua leitura, meu benzinho. A Vovozinha sente que o universo lhe deu as dicas necess√°rias para guiar seus passos. ‚ú®\n\nQuando seu cora√ß√£o buscar novas orienta√ß√µes ou quiser outra tiragem completa, √© s√≥ dizer **'vov√≥'** ou **'!tarot'** novamente. A Vovozinha estar√° aqui para te acolher! üòä\n\n_Para Limpeza Energ√©tica e Prote√ß√£o Espiritual, visite: https://s.shopee.com.br/BHzHi3dTW_"
                        });

                        // --- FINALIZA O CICLO DA LEITURA ---
                        if (!usuariosTarotDB[sender].is_admin_granted_access) {
                            usuariosTarotDB[sender].pagamento_confirmado_para_leitura = false;
                            usuariosTarotDB[sender].aguardando_pagamento_para_leitura = false;
                        }
                        delete estadoTarot[sender];
                        salvarDB();
                        // --- FIM DO NOVO ---

                    } else {
                        await sock.sendPresenceUpdate("composing", sender);
                        await new Promise((resolve) => setTimeout(resolve, 1500));
                        await sock.sendMessage(sender, {
                            text: "A Vovozinha n√£o entendeu, meu benzinho. Por favor, escolha **'1'** para uma carta, **'2'** para tr√™s, ou **'3'** para uma tiragem completa. üôè",
                        });
                    }
                    break;

                default:
                    await sock.sendPresenceUpdate("composing", sender);
                    await new Promise((resolve) => setTimeout(resolve, 1500));
                    await sock.sendMessage(sender, {
                        text: "A Vovozinha est√° um pouco confusa, meu benzinho. Parece que o fluxo de leitura foi interrompido ou j√° foi conclu√≠do. Por favor, diga **'vov√≥'** ou **'!tarot'** para iniciar uma nova leitura. ü§∑‚Äç‚ôÄÔ∏è",
                    });
                    delete estadoTarot[sender];
                    break;
            }
            return;
        }

        // Logic for sending mass messages (kept separate from Tarot logic)
        if (estadoEnvio[sender]) {
            const estado = estadoEnvio[sender];

            if (m.message.documentMessage) {
                const fileName = m.message.documentMessage.fileName || "contacts.csv";
                const buffer = await downloadMediaMessage(m, "buffer", {}, { logger: P() });
                const caminho = path.join(__dirname, "mensagens", fileName);
                fs.writeFileSync(caminho, buffer);
                estado.numeros = extrairNumerosDoCSV(caminho);
                estado.etapa = "mensagem";
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: `üìÑ CSV com ${estado.numeros.length} n√∫meros recebidos. Agora envie a mensagem.`,
                });
                return;
            }

            if (estado.etapa === "numero") {
                estado.numeros = [msg.replace(/\D/g, "")];
                estado.etapa = "mensagem";
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "‚úâÔ∏è Agora envie a mensagem de texto.",
                });
                return;
            }

            if (estado.etapa === "mensagem") {
                estado.mensagem = msg;
                estado.etapa = "midia";
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "üìé Envie uma imagem/v√≠deo/documento ou digite **'pular'** para enviar sem m√≠dia.",
                });
                return;
            }

            if (estado.etapa === "midia") {
                if (msg.toLowerCase() === "pular") {
                    await enviarMensagens(sock, estado.numeros, estado.mensagem);
                } else if (
                    m.message.imageMessage ||
                    m.message.videoMessage ||
                    m.message.documentMessage
                ) {
                    const tipo = m.message.imageMessage
                        ? "image"
                        : m.message.videoMessage
                            ? "video"
                            : "document";

                    const buffer = await downloadMediaMessage(m, "buffer", {}, { logger: P() });

                    await enviarMensagens(sock, estado.numeros, estado.mensagem, buffer, tipo);
                }

                delete estadoEnvio[sender];
                await sock.sendPresenceUpdate("composing", sender);
                await new Promise((resolve) => setTimeout(resolve, 1500));
                await sock.sendMessage(sender, {
                    text: "Mensagens enviadas com sucesso, meu caro!",
                });
                return;
            }
        }
    });
}

function extrairNumerosDoCSV(caminho) {
    try {
        const linhas = fs.readFileSync(caminho, "utf8").split("\n");
        return linhas
            .map((linha) => linha.trim().replace(/\D/g, ""))
            .filter((numero) => numero.length >= 11);
    } catch (e) {
        console.error("Error reading CSV:", e);
        return [];
    }
}

async function enviarMensagens(sock, numeros, mensagem, midia = null, tipo = "text") {
    for (const numero of numeros) {
        const jid = `${numero}@s.whatsapp.net`;

        try {
            if (midia) {
                await sock.sendMessage(jid, { [tipo]: midia, caption: mensagem });
            } else {
                await sock.sendMessage(jid, { text: mensagem });
            }

            console.log(`‚úÖ Message sent to ${numero}`);
        } catch (e) {
            console.error(`‚ùå Error sending to ${numero}:`, e.message);
        }
    }
}

// --- Start the Express server and then the bot ---
// This ensures the web server is listening on a port for Render to detect.
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    startBot(); // Start the bot after the server is listening
});
